# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

module Environment
  DEV = "DEV"
  UAT = "UAT"
  SIT = "SIT"
  PROD = "PROD"
end

platform :android do
  desc "Building an apk"
  lane :buildApk do
    environment = UI.select("Select your environment: ", [Environment::DEV,Environment::UAT,Environment::SIT,Environment::PROD])
    UI.success("You have selected '#{environment}' environment")
    case environment
    when Environment::DEV
      devApk
    when Environment::UAT
      uatApk
    when Environment::SIT
      sitApk
    when Environment::PROD
      prodApk
    end
  end

  desc "Building an dev apk"
  lane :buildDevApk do
    devApk
  end

  desc "Building an Android App Bundle"
  lane :appBundle do |options|
    sh("flutter build appbundle --obfuscate --split-debug-info=symbols --release --flavor prod -t lib/main_prod.dart")
    sh("mv ../../build/app/outputs/bundle/prodRelease/app-prod-release.aab ~/Downloads/prodAppBundle.aab") if (options[:isMove])
    # sh("flutter packages pub run sentry_dart_plugin")
  end

  desc "Building an Beta version to Play Store"
  lane :beta do
    appBundle(isMove: false)
    supply(
      track: "internal",
      aab_paths: "../build/app/outputs/bundle/prodRelease/app-prod-release.aab"
    )
  end

  desc "Publishing apk to Firebase Distribution"
  lane :firebaseDistribute do |options|
    ENV["GOOGLE_APPLICATION_CREDENTIALS"] = "../fastlane-supply.json"
    case options[:env]
    when "dev"
      androidAppId = "1:688834453847:android:8060a94de1ca9e36711e12"
    when "prod"
      androidAppId = "1:688834453847:android:5a503b147b5541b1711e12"
    end
    UI.message("Android app id: #{androidAppId}")

    # Prompt error if file not found
    UI.user_error!("You need to include google-service.json and fastlane-supply.json") if(androidAppId.nil? || ENV["GOOGLE_APPLICATION_CREDENTIALS"].nil?)
    
    # Proceed with the code if no error
    case options[:env]
    when "dev"
      devApk(buildName: options[:buildName], buildNumber: options[:buildNumber])
    when "prod"
      prodApk(buildName: options[:buildName], buildNumber: options[:buildNumber])
    end
    
    firebase_app_distribution(
      app: androidAppId,
      service_credentials_file: ENV["GOOGLE_APPLICATION_CREDENTIALS"],
      groups: (!options[:group].nil? && !options[:group].empty?) ? options[:group] : "",
      release_notes: (!options[:notes].nil? && !options[:notes].empty?) ? options[:notes] : "",
      android_artifact_type: "APK",
      android_artifact_path: "../build/app/outputs/flutter-apk/app.apk",
      debug: true
    )
  end

  desc "Building a development apk"
  private_lane :devApk do |options|
    build_name = options[:buildName]
    build_number = options[:buildNumber]
    flutter_command = "flutter build apk --debug --flavor dev --dart-define=FLAVOR=dev --split-per-abi --target-platform android-arm,android-arm64,android-x64"
    flutter_command += " --build-name #{build_name}" if build_name
    flutter_command += " --build-number #{build_number}" if build_number
    sh(flutter_command)
    sh("mv ../../build/app/outputs/flutter-apk/app-arm64-v8a-dev-debug.apk ../../build/app/outputs/flutter-apk/app.apk")
  end
  
  desc "Building a SIT apk"
  private_lane :sitApk do |options|
    sh("flutter build apk --profile --flavor sit --dart-define=FLAVOR=sit --split-per-abi --target-platform android-arm,android-arm64,android-x64")
    sh("mv ../../build/app/outputs/flutter-apk/app-arm64-v8a-sit-profile.apk ../../build/app/outputs/flutter-apk/app.apk")
  end

  desc "Building a UAT apk"
  private_lane :uatApk do |options|
    sh("flutter build apk --profile --flavor uat --dart-define=FLAVOR=uat --split-per-abi --target-platform android-arm,android-arm64,android-x64")
    sh("mv ../../build/app/outputs/flutter-apk/app-arm64-v8a-uat-profile.apk ../../build/app/outputs/flutter-apk/app.apk")
  end

  desc "Building a production apk"
  private_lane :prodApk do |options|
    sh("flutter build apk --obfuscate --split-debug-info=symbols --release --flavor prod --dart-define=FLAVOR=prod --split-per-abi --target-platform android-arm,android-arm64,android-x64")
    sh("mv ../../build/app/outputs/flutter-apk/app-arm64-v8a-prod-release.apk ../../build/app/outputs/flutter-apk/app.apk")
  end
end

pipeline {
    agent any
    
    environment {
        PATH = "/opt/homebrew/bin:$PATH" // Add Fastlane path to the environment
    }
    
    stages {
        stage('Get Git Branch') { 
            steps {
                script {
                    // Print the Git branch for debugging
                    echo "Current Git Branch: ${env.GIT_BRANCH}"
                }
            }
        }
        
        stage('Setup Files') { 
            steps {
                script {
                    // Copy keystore and service account files
                    withCredentials([file(credentialsId: 'kai-chat-keystore', variable: 'KEYSTORE_FILE')]) {
                        sh """
                        mkdir -p android
                        cp \$KEYSTORE_FILE android/upload-keystore.jks
                        """
                    }
                    // Create environment files and key properties file
                    sh """
                    touch .env.dev
                    touch .env.uat
                    touch .env.prod
                    touch android/key.properties
                    
                    echo 'storePassword=password
                    keyPassword=password
                    keyAlias=upload
                    storeFile=../upload-keystore.jks' > android/key.properties
                    """
                    
                    // Append to .env files
                    withCredentials([string(credentialsId: 'kai-chat-env', variable: 'ENV_SECRET')]) {
                        sh """
                        for file in .env.dev .env.uat .env.prod; do
                            echo "\$ENV_SECRET" >> \$file
                        done
                        """
                    }
                }
            }
        }
        
        stage('Start build app') {
            when {
                expression { env.GIT_BRANCH == "origin/test/jenkins" }
            }
            steps {
                script {
                    // Run Flutter commands and Fastlane
                    sh """
                    flutter pub get
                    cd android
                    fastlane buildDevApk
                    """
                    echo "Yahoo! App build success!"
                }
            }
        }

        stage('MobSF Scan') {
            steps {
                script {
                    def apkPath = "/Users/kai/Downloads/dev.apk"
                    def mobsUrl = "http://0.0.0.0:8000"
                    def mobsToken = "80627bff32ffd45e6f4c673ac5ea19aa31b4b4897ee0ae1f3d79b26b78bb2304"
                    // Upload APK to MobSF
                    def curlCommand = "curl -s -F 'file=@${apkPath}' '${mobsUrl}/api/v1/upload' -H 'Authorization:${mobsToken}'"
                    def uploadResult = sh(script: curlCommand, returnStdout: true).trim()
                    if (uploadResult) {
                        // Parse JSON result and convert to serializable Map
                        def resultJson = parseJsonToMap(uploadResult)
                        def hash = resultJson.hash
                        sh "curl -X POST --url '${mobsUrl}/api/v1/scan' --data 'hash=${hash}' -H 'Authorization:${mobsToken}'"
                        echo "Please visit to view your report: ${mobsUrl}/static_analyzer/${hash}/"
                    } else {
                        error "Upload command returned empty result"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}

// Helper method to parse JSON and return a serializable Map
@NonCPS
def parseJsonToMap(String json) {
    def jsonSlurper = new groovy.json.JsonSlurper()
    def lazyMap = jsonSlurper.parseText(json)
    def serializable = [:]
    lazyMap.each { key, value ->
        serializable[key] = value
    }
    return serializable
}